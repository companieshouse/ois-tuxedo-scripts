#!/bin/bash

# Generate function call statistics and copy to remote host for further
# processing.

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")
parent_dir="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)"

today=$(date +%d%m%y)
yesterday=$(date --date=yesterday +%d%m%y)
reqdate=${1-$yesterday}

log_dir="{{ tuxedo_logs_path }}/${USER}"
log_archive_dir="${log_dir}/old"

# stats_dir should be the path to a directory on a shared NFS mount; output files
# are written to this directory, and fil-tuxedo-stack servers read and process
# files from the same mount in the ois_stats_update script
stats_dir="/scanning/ois-stats"

# -- General ------------------------------------------------------------------

check_user () {
    if [[ "${USER}" == "root" ]]; then
        echo "${script_name}: This script should be executed as a Tuxedo service user not root"
        exit 1
    fi
}

create_temp_dir () {
    temp_dir=$(mktemp -d /tmp/${script_name}.XXXXXXX)
    if [[ $? -ne 0 ]]; then
        echo "Unable to create oisstats temporary directory" >&2
        exit 1
    fi
}

prepare_request_file () {
    if [[ "${reqdate}" == "${today}" ]]; then
        if [[ ! -s "${log_dir}/txlog.${today}" ]]; then
            echo "${log_dir}/txlog.${today} is empty"
            exit 1
        fi

        cp "${log_dir}/txlog.${today}" "${temp_dir}"
        reqfile="${temp_dir}/txlog.${today}"
    else
        # We assume that past logs have been rotated and that only a single compressed
        # archive encapsulates the log for a given date in its entirety (i.e. .1.gz)
        reqfile="${log_archive_dir}/txlog.${reqdate}.1.gz"
    fi

    if [[ ! -f "${reqfile}" ]]; then
        echo "txlog.$reqdate does not exist"
        exit 1
    fi

    echo "*** Reqdate is ${reqdate}"
    echo "*** Reqfile is ${reqfile}"
}

create_days_file () {
    days_file="${temp_dir}/days.${reqdate}"

    local cat_cmd=cat
    if [[ "${reqfile}" =~ .*.gz$ ]]; then
        cat_cmd=zcat
    fi

    awk -f "${parent_dir}/stday" <("${cat_cmd}" "${reqfile}" | sed s/6100=18s/6100=18/g) > "${days_file}"
}

generate_function_stats () {
    function_stats_file="${temp_dir}/resfns.${reqdate}"
    "${parent_dir}/dofns_miu" "${days_file}" "${function_stats_file}"
    echo >> "${function_stats_file}"
}

delete_temp_dir () {
    rm -rf "${temp_dir}"
}

share_stats_file () {
    local machine_name=$(uname -n | sed -E 's/ois-tuxedo-(.*)-(.*)/ois-\1-0\2/')
    local stats_file="${USER}.func_stats_${machine_name}.${reqdate}"
    cp -f "${function_stats_file}" "${stats_dir}/${stats_file}"
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    check_user
    create_temp_dir
    prepare_request_file
    create_days_file
    generate_function_stats
    share_stats_file
    delete_temp_dir
}

main "${@}"
