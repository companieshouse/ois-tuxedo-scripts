#!/bin/bash

# This script checks server count thresholds for OIS processes and parses both
# trlog and txlog files for network or CHIPS errors, generating email alerts
# for further investigation if needed.

# -- Internal variables -------------------------------------------------------

today=$(date +%d%m%y)
txlog_failures=()
trlog_failures=()
txlog=/var/log/tuxedo/{{ service_name }}/txlog.${today}
trlog=/var/log/tuxedo/{{ service_name }}/trlog.${today}

unit_sleep_interval=20

# Minimum server counts for alerting
orders_min_count=4
bbl_min_count=1
dom_min_count=1
aisord_min_count=2
queue_min_count=1
sqsp_min_count=1
mncq_min_count=1

# -- General ------------------------------------------------------------------

create_mail_files () {
    local name=$1

    txlog_mail_file=$(mktemp -t txlog_mail.XXXXXXX)
    if [[ $? -ne 0 ]]; then
        echo "Unable to create txlog_mail temporary file" >&2
        exit 1
    fi

    trlog_mail_file=$(mktemp -t trlog_mail.XXXXXXX)
    if [[ $? -ne 0 ]]; then
        echo "Unable to create trlog_mail temporary file" >&2
        exit 1
    fi
}

record_txlog_unit_fail () {
    local unit=$1

    IFS=" "
    if [[ ! "${IFS}${txlog_failures[*]}${IFS}" =~ "${IFS}${unit}${IFS}" ]]; then
        txlog_failures+=(${unit})
    fi
    unset IFS
}

record_trlog_unit_fail () {
    local unit=$1

    IFS=" "
    if [[ ! "${IFS}${trlog_failures[*]}${IFS}" =~ "${IFS}${unit}${IFS}" ]]; then
        trlog_failures+=(${unit})
    fi
    unset IFS
}

append_txlog_mail_file () {
    local message=$1
    echo ${message} >> ${txlog_mail_file}
}

append_trlog_mail_file () {
    local message=$1
    echo ${message} >> ${trlog_mail_file}
}

delete_mail_files () {
    rm -f ${txlog_mail_file}
    rm -f ${trlog_mail_file}
}

# -- Server counts ------------------------------------------------------------

check_bbl () {
    local bbl_count=$(pgrep -u ${USER} BBL | wc -l)

    if [[ ${bbl_count} -lt ${bbl_min_count} ]]; then
        append_txlog_mail_file "${today}, Tuxedo BBL is not running"
        record_txlog_unit_fail "BBL"
    fi
}

check_orders_servers () {
    local orders_count=$(pgrep -u ${USER} ORDERS | wc -l)

    if [[ ${orders_count} -lt ${orders_min_count} ]]; then
        append_txlog_mail_file "${today}, ${orders_count} of 8 ORDERS servers running"
        record_txlog_unit_fail "ORDERS SERVERS"
    fi
}

check_domain_servers () {
    dom_count=$(pgrep -u ${USER} DOMAIN | wc -l)

    if [[ ${dom_count} -lt ${dom_min_count} ]]; then
        append_txlog_mail_file "${today}, Tuxedo DOMAIN server is not running"
        record_txlog_unit_fail "DOM SERVERS"
    fi
}

check_aisord_servers () {
    aisord_count=$(pgrep -u ${USER} AISORD | wc -l)

    if [[ ${aisord_count} -lt ${aisord_min_count} ]]; then
        append_txlog_mail_file "${today}, ${aisord_count} of 2 Tuxedo AIS servers running"
        record_txlog_unit_fail "AIS SERVERS"
    fi
}

check_queue_servers () {
    queue_count=$(pgrep -u ${USER} TMQUEUE | wc -l)

    if [[ ${queue_count} -lt ${queue_min_count} ]]; then
        append_txlog_mail_file "${today}, Tuxedo QUEUE server is not running"
        record_txlog_unit_fail "Q SERVERS"
    fi
}

check_sqsp_servers () {
    sqsp_count=$(pgrep -u ${USER} SQSP | wc -l)

    if [[ ${sqsp_count} -lt ${sqsp_min_count} ]]; then
        append_txlog_mail_file "${today}, Tuxedo SQSP server is not running"
        record_txlog_unit_fail "SQSP SERVER"
    fi
}

check_mncq_servers () {
    mncq_count=$(ps -ef | grep ${USER} | grep mncq | grep -v mncq_rms | grep -v "grep" | wc -l)

    if [[ ${mncq_count} -lt ${mncq_min_count} ]]; then
        append_txlog_mail_file "${today}, MNCQ process is not running"
        record_txlog_unit_fail "MNCQ"
    fi
}

# -- Log checks ---------------------------------------------------------------

check_transaction_logs () {
    local start_mins=$1
    local end_mins=$2

    local last_tx=$(tail -1 $txlog)

    local last_tx_hour=$(cut -c1-2 <<< ${last_tx})
    local last_tx_min=$(cut -c4-5 <<< ${last_tx})
    local last_tx_mins_total=$(expr ${last_tx_hour} \* 60 + ${last_tx_min})

    local current_day=$(date +%a)
    local current_hour=$(date +%H)
    local current_min=$(date +%M)
    local current_mins_total=$(expr ${current_hour} \* 60 + ${current_min})

    if [[ ${current_mins_total} -ge ${start_mins} && ${current_mins_total} -le ${end_mins} ]]; then

        local difference=$(expr $current_mins_total \- $last_tx_mins_total)

        if [[ $current_day = "Sat" || $current_day = "Sun" ]]; then
            gapcheck=150
        else
            gapcheck=90
        fi

        if [[ ! -s $txlog ]]; then
            append_txlog_mail_file "TXLOG Not written to"
            record_txlog_unit_fail "TXLOG"
        fi

        if [[ ${difference} -gt ${gapcheck} ]]; then
            append_txlog_mail_file "txlog not written to for ${difference} mins"
            record_txlog_unit_fail "TXLOG"
        fi
    fi
}


check_network_errors () {
    network_errors=$(tail -20 /var/log/tuxedo/{{ service_name }}/ULOG.${today} | grep "COHFPRDOM; network error code 0xc" | wc -l)

    if [[ ${network_errors} -gt 0 ]]; then
        append_txlog_mail_file "ULOG showing COHFPRDOM network error"
        append_txlog_mail_file "Running CABS CLOSE"
        {{ scripts_path }}/cabsclose >> ${txlog_mail_file}
        record_txlog_unit_fail "QSP NETWORK"
    fi
}

check_cabsord_errors () {
    cabsord_errors=$(tail -20 /var/log/tuxedo/{{ service_name }}/ULOG.${today} | grep "tpcall to CABS_Ord failed" | wc -l)

    if [[ ${cabsord_errors} -gt 5 ]]; then
        append_txlog_mail_file "ULOG showing tpcall to CABS_Ord failed"
        append_txlog_mail_file "Running CABS CLOSE"
        {{ scripts_path }}/cabsclose >> ${txlog_mail_file}
        record_txlog_unit_fail "QSP CABS_Ord Failure"
    fi
}

check_chips_errors () {
    chips_errors=$(tail -45 ${trlog} | grep "rcode: -1" | wc -l)

    if [[ ${chips_errors} -gt 1 ]]; then
        append_trlog_mail_file "trlog showing -1 errors returned from CHIPS. CSI need to be contacted to rectify."
        record_trlog_unit_fail "CHIPS"
    fi
}

# -- Alerting -----------------------------------------------------------------

send_alert () {
    local subject=$(uniq $1)
    local mail_file=$2

    mailx -r $(hostname) -s "WARNING - ${subject}" {% for recipient in alert_recipients %}{{ recipient }} {% endfor %}< ${mail_file}
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    create_mail_files
    check_bbl
    check_orders_servers
    check_domain_servers
    check_aisord_servers
    check_queue_servers
    check_sqsp_servers
    check_mncq_servers
    check_transaction_logs 0    425    # Transactions between 00:00 and 07:05
    check_transaction_logs 425  1140   # Transactions between 07:05 and 19:00
    check_transaction_logs 1140 1440   # Transactions between 19:00 and 00:00
    check_network_errors
    check_cabsord_errors

    if [[ -s ${txlog_mail_file} ]]; then
        send_alert "OIS Problem - ${txlog_failures[*]}" "${txlog_mail_file}"
    fi

    if [[ -s ${trlog_mail_file} ]]; then
        send_alert "TRLOG Problem - ${trlog_failures[*]}" "${trlog_mail_file}"
    fi

    delete_mail_files
}

main "${@}"
